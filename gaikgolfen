#!/usr/bin/env sh

for binary in php sed stty dirname base64 sed; do
    if ! command -v "${binary}" >/dev/null; then
        echo "Require ${binary}" >&2;
        exit 1;
    fi
done;

if [ "$(php -v | head -n1 | grep -o "PHP [0-9]\+" | cut -c5-)" -lt 7 ]; then
    echo 'Require PHP 7 or higher' >&2;
    exit 2;
fi

root_dir=$(dirname "${0}");
(cd "${root_dir}" && ./update -q);

credentials_file="${root_dir}/cache/credentials";
cache_file="${root_dir}/cache/session";
use_credentials_cache=1;
interval=600;
columns=4;
course=64;

while getopts 'l:c:i:n:s' arg; do
    case "${arg}" in
        's') use_credentials_cache=0 ;;
        'i') interval="${OPTARG}"    ;;
        'n') columns="${OPTARG}"     ;;
        'c') course="${OPTARG}"      ;;
        'l') login="${OPTARG}"       ;;
        *)
             echo "Unrecognized option ${arg}" >&2
             ;;
    esac
done

find "${root_dir}"/cache/*.output.cache -exec rm {} \; 2>/dev/null;
find "${credentials_file}" -mtime +3 -exec rm {} \; 2>/dev/null;

if [ "${use_credentials_cache}" -eq 1 ]; then
    if [ -f "${credentials_file}" ]; then
        if [ -n "${login}" ]; then
            passwd=$(grep "${login}:" "${credentials_file}" | cut -d':' -f2-);
        else
            while read -r line; do
                passwd=$(echo "${line}" | cut -d':' -f2-);
                login=$(echo "${line}" | cut -d':' -f1);
            done < "${credentials_file}";
        fi
    fi
fi

if [ -z "${login}" ]; then
    read -rp 'Login: ' login;
    if [ -z "${login}" ]; then
        echo 'Login not set' >&2;
        exit 3;
    fi
fi

if [ -z "${passwd}" ]; then
    printf 'Choose: ';
    stty -echo;
    IFS= read -r passwd;
    stty echo;
    echo '';

    if [ -z "${passwd}" ]; then
        echo 'Password not set' >&2;
        exit 4;
    fi

    passwd=$(echo "${passwd}" | base64);
fi

if [ "${use_credentials_cache}" -eq 1 ]; then
    echo "${login}:${passwd}" > "${credentials_file}";
fi

if [ "${interval}" -lt 60 ]; then
    interval=60;
fi

while true; do
    date +'Last run: %A %B %d %T';

    did_notify=0;
    while read -r dateEntry; do
        if [ -z "${dateEntry}" ]; then
            continue;
        fi

        if echo "${dateEntry}" | grep -q '#[ ]*#'; then
            continue;
        fi

        new_output=$("${root_dir}/src/gaikgolfen.php" -v \
                         --login="${login}" --passwd="${passwd}" \
                         --date="${dateEntry}" --columns="${columns}" \
                         --display=table --course="${course}" \
                         --cache="${cache_file}");

        if [ $? -eq 10 ]; then
            if [ -f "${credentials_file}" ]; then
                rm "${credentials_file}";
            fi

            exit 10;
        fi

        url=$(echo "${new_output}" | head -n1);
        output=$(echo "${new_output}" | tail -n +2);

        if [ "$(cat "${root_dir}/cache/${dateEntry}.output.cache" 2>/dev/null)" = "${output}" ]; then
            continue;
        fi

        echo "${dateEntry}";
        echo "${dateEntry}" | sed 's/./=/g';
        echo "${output}" | tee "${root_dir}/cache/${dateEntry}.output.cache";
        echo '';

        if [ "${did_notify}" -eq 1 ]; then
            continue;
        fi

        if [ -x "$(command -v tput)" ]; then
            tput bel 2>/dev/null;
        fi

        if [ -x "$(command -v termux-notification)" ]; then
            hash=$(date +'%s');
            termux-notification --title 'Gaikgolfen?' \
                                --content 'Tee times changed' \
                                --image-path "${root_dir}/img/gig.png" \
                                --vibrate 200,20,20 \
                                --action "termux-open-url '${url}#$(date +'%s')'";
        elif [ -x "$(command -v notify-send)" ]; then
            notify-send -i "${root_dir}/img/gig.png" \
                        -t 3000 'Gaikgolfen?' 'Tee times changed';
        fi

        did_notify=1;
    done < "${root_dir}/dates.txt";

    sleep "${interval}";
done;
